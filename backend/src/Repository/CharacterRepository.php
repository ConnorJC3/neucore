<?php

declare(strict_types=1);

namespace Neucore\Repository;

use Doctrine\ORM\EntityRepository;
use Neucore\Entity\Character;
use Neucore\Util\Database;

/**
 * CharacterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @method Character|null find($id, $lockMode = null, $lockVersion = null)
 * @method Character|null findOneBy(array $criteria, array $orderBy = null)
 * @method Character[] findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 *
 * @psalm-suppress MissingTemplateParam
 */
class CharacterRepository extends EntityRepository
{
    /**
     * @return Character[]
     */
    public function findMainByNamePartialMatch(string $name): array
    {
        $name = Database::escapeForLike($name);

        $query = $this->createQueryBuilder('c')
            ->where("c.name LIKE :name ESCAPE '\'")
            ->addOrderBy('c.name', 'ASC')
            ->setParameter('name', "%$name%")
            ->andWhere('c.main = :main')
            ->setParameter('main', true);

        return $query->getQuery()->getResult();
    }

    /**
     * @return int[] Character IDs
     */
    public function getGroupMembersMainCharacter(int $groupId, ?int $corporationId = null): array
    {
        $query = $this->createQueryBuilder('c')
            ->select('c.id')
            ->leftJoin('c.player', 'p')
            ->innerJoin('p.groups', 'g', 'WITH', 'g.id = :groupId')
            ->where('c.main = :main')
            ->setParameter('groupId', $groupId)
            ->setParameter('main', true);
        if ($corporationId !== null) {
            $query->andWhere('c.corporation = :corporation')->setParameter('corporation', $corporationId);
        }

        return array_map(function (array $char) {
            return (int)$char['id'];
        }, $query->getQuery()->getResult());
    }

    /**
     * @param int[] $playerIds
     */
    public function getAllCharactersFromPlayers(array $playerIds): array
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select([
            'c.id',
            'IDENTITY(c.player) AS playerId'
        ])
            ->where($qb->expr()->in('c.player', ':ids'))
            ->setParameter('ids', $playerIds);

        return array_map(function (array $row) {
            return [
                'id' => (int)$row['id'],
                'playerId' => (int)$row['playerId'],
            ];
        }, $qb->getQuery()->getResult());
    }

    /**
     * @param int[] $playerIds
     * @return int[]
     */
    public function getCharacterIdsFromPlayers(array $playerIds, ?int $dbResultLimit = null, int $offset = 0): array
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id')
            ->where($qb->expr()->in('c.player', ':ids'))
            ->setParameter('ids', $playerIds)
            ->addOrderBy('c.id')
            ->setMaxResults($dbResultLimit) // don't use this with JOIN
            ->setFirstResult($offset);

        return array_map(function (array $row) {
            return (int)$row['id'];
        }, $qb->getQuery()->getResult());
    }

    public function getCharacterIdsNotFromPlayers(array $playerIds, ?int $dbResultLimit = null, int $offset = 0): array
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id')
            ->where($qb->expr()->notIn('c.player', ':ids'))
            ->setParameter('ids', $playerIds)
            ->addOrderBy('c.id')
            ->setMaxResults($dbResultLimit) // don't use this with JOIN
            ->setFirstResult($offset);

        return array_map(function (array $row) {
            return (int)$row['id'];
        }, $qb->getQuery()->getResult());
    }

    public function findPlayersByCharacters(array $characterIds): array
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select(['c.id AS characterId', 'p.id', 'p.name'])
            ->leftJoin('c.player', 'p')
            ->where($qb->expr()->in('c.id', ':IDs'))
            ->orderBy('p.id')
            ->addOrderBy('c.id')
            ->setParameter('IDs', $characterIds);

        return array_map(function (array $character) {
            return [
                'id' => $character['id'],
                'name' => $character['name'],
                'characterId' => (int)$character['characterId'],
            ];
        }, $qb->getQuery()->getResult());
    }
}
