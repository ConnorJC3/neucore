<?php

declare(strict_types=1);

namespace Neucore\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use Neucore\Entity\Group;

/**
 * GroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @method Group|null find($id, $lockMode = null, $lockVersion = null)
 * @method Group|null findOneBy(array $criteria, array $orderBy = null)
 * @method Group[] findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class GroupRepository extends EntityRepository
{
    public function getMembersWithCorporationAndAlliance(int $groupId): array
    {
        $query = $this
            ->createQueryBuilder('g')
            ->select([
                'p.id AS player_id',
                'p.name AS player_name',
                'char.id AS character_id',
                'corp.id AS corporation_id',
                'corp.name AS corporation_name',
                'alliance.id AS alliance_id',
                'alliance.name AS alliance_name',
            ])
            ->innerJoin('g.players', 'p')
            ->leftJoin('p.characters', 'char', Join::WITH, 'char.main = :main')
            ->leftJoin('char.corporation', 'corp')
            ->leftJoin('corp.alliance', 'alliance')
            ->where('g.id = :groupId')
            ->orderBy('p.name', 'ASC')
            ->setParameter('groupId', $groupId)
            ->setParameter('main', true)
        ;

        return array_map(function ($item) {
            $item['character_id'] = $item['character_id'] !== null ? (int) $item['character_id'] : null;
            $item['corporation_id'] = $item['corporation_id'] !== null ? (int) $item['corporation_id'] : null;
            $item['alliance_id'] = $item['alliance_id'] !== null ? (int) $item['alliance_id'] : null;
            return $item;
        }, $query->getQuery()->getResult());
    }
}
